In SQL databases, indexing is a technique used to improve the performance of database queries by creating data structures called indexes.
An index is a separate structure that allows for efficient data retrieval based on specific columns or expressions in a table.

Here are some key points about indexing in SQL databases:

	Purpose: Indexing is used to speed up data retrieval operations, primarily SELECT queries, by reducing the number of disk reads and
		improving search efficiency.
	Index Structure: An index is typically implemented as a data structure, such as a B-tree or hash table, that organizes the indexed
		column's values along with their corresponding row pointers. This enables quick lookups and efficient traversal of the index.
	Index Creation: Indexes are created on specific columns or expressions in a table using the CREATE INDEX statement. The choice of
		columns to index depends on the query patterns and the data being queried. Generally, columns used in WHERE clauses, JOIN
		conditions, and ORDER BY clauses are good candidates for indexing.
	Index Types: SQL databases provide different types of indexes, including primary indexes, unique indexes, clustered indexes, and
		non-clustered indexes. Each type has specific characteristics and is suitable for different scenarios.
	Trade-offs: While indexing improves query performance, it also imposes overhead on data modification operations (such as INSERT,
		UPDATE, and DELETE). This is because index maintenance is required whenever data changes. Therefore, indexing should be used
		judiciously based on the read-to-write ratio and the specific requirements of the application.
	Index Statistics: SQL databases maintain statistics about indexes, such as cardinality (distinct values in the indexed column) and
		selectivity (percentage of rows selected by a query). These statistics help the database optimizer determine the most efficient
		query execution plan.

By creating indexes on appropriate columns, you can significantly enhance the performance of database queries. However, it's important to
analyze the query patterns, monitor the database's performance, and periodically review and optimize the indexes to ensure their effectiveness.

-----------------------------------------------------------------------------------------------------------------------------------------------

An index is used to speed up searching in the database. MySQL has some good documentation on the subject (which is relevant for other SQL servers
as well): http://dev.mysql.com/doc/refman/5.0/en/mysql-indexes.html

An index can be used to efficiently find all rows matching some column in your query and then walk through only that subset of the table to find
exact matches. If you don't have indexes on any column in the WHERE clause, the SQL server has to walk through the whole table and check every row
to see if it matches, which may be a slow operation on big tables.

The index can also be a UNIQUE index, which means that you cannot have duplicate values in that column, or a PRIMARY KEY which in some storage engines
defines where in the database file the value is stored.

In MySQL you can use EXPLAIN in front of your SELECT statement to see if your query will make use of any index. This is a good start for troubleshooting
performance problems. Read more here: http://dev.mysql.com/doc/refman/5.0/en/explain.html

-----------------------------------------------------------------------------------------------------------------------------------------------

