/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.springredisopenapi.generated;

import com.example.springredisopenapi.generated.model.CreateUser;
import com.example.springredisopenapi.generated.model.HttpErrorResponse;
import com.example.springredisopenapi.generated.model.ModifyUser;
import com.example.springredisopenapi.generated.model.User;
import com.example.springredisopenapi.generated.model.UsersGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "User", description = "the User API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users : Get all users.
     * Get all users.
     *
     * @param name Name of the resource (optional)
     * @param email Email of the resource (optional)
     * @param gender Gender of the resource (optional)
     * @return Found applied application configuration. (status code 200)
     *         or The request failed due to wrong data. Please check the provided parameters and try again. (status code 400)
     *         or The request failed because you are not authorized. (status code 401)
     *         or The request failed because the requested resource is forbidden. (status code 403)
     *         or The request failed because the server is in error. Please try again later. (status code 500)
     */
    @Operation(
        operationId = "usersGet",
        summary = "Get all users.",
        description = "Get all users.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Found applied application configuration.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request failed due to wrong data. Please check the provided parameters and try again.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request failed because you are not authorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The request failed because the requested resource is forbidden.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request failed because the server is in error. Please try again later.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UsersGet200Response> usersGet(
        @Parameter(name = "name", description = "Name of the resource", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "email", description = "Email of the resource", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false) String email,
        @Parameter(name = "gender", description = "Gender of the resource", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gender", required = false) String gender
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 0, \"results\" : [ { \"gender\" : \"gender\", \"groupIds\" : [ \"groupIds\", \"groupIds\" ], \"name\" : \"name\", \"id\" : \"id\", \"email\" : \"email\" }, { \"gender\" : \"gender\", \"groupIds\" : [ \"groupIds\", \"groupIds\" ], \"name\" : \"name\", \"id\" : \"id\", \"email\" : \"email\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : Add new user.
     * Add new user.
     *
     * @param createUser Request creating a new user. (required)
     * @return User is created. (status code 201)
     *         or The request failed due to wrong data. Please check the provided parameters and try again. (status code 400)
     *         or The request failed because you are not authorized. (status code 401)
     *         or The request failed because the requested resource is forbidden. (status code 403)
     *         or The request failed because the server is in error. Please try again later. (status code 500)
     */
    @Operation(
        operationId = "usersPost",
        summary = "Add new user.",
        description = "Add new user.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request failed due to wrong data. Please check the provided parameters and try again.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request failed because you are not authorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The request failed because the requested resource is forbidden.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request failed because the server is in error. Please try again later.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> usersPost(
        @Parameter(name = "CreateUser", description = "Request creating a new user.", required = true) @Valid @RequestBody CreateUser createUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gender\" : \"gender\", \"groupIds\" : [ \"groupIds\", \"groupIds\" ], \"name\" : \"name\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId} : Delete the user by user ID.
     *
     * @param userId ID of the user (required)
     * @return Deleted user by provided user ID. (status code 204)
     *         or The request failed due to wrong data. Please check the provided parameters and try again. (status code 400)
     *         or The request failed because you are not authorized. (status code 401)
     *         or The request failed because the requested resource is forbidden. (status code 403)
     *         or The request failed because the server is in error. Please try again later. (status code 500)
     */
    @Operation(
        operationId = "usersUserIdDelete",
        summary = "Delete the user by user ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted user by provided user ID."),
            @ApiResponse(responseCode = "400", description = "The request failed due to wrong data. Please check the provided parameters and try again.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request failed because you are not authorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The request failed because the requested resource is forbidden.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request failed because the server is in error. Please try again later.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> usersUserIdDelete(
        @Parameter(name = "userId", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId} : Get the user by user ID.
     *
     * @param userId ID of the user (required)
     * @return Found user by provided user ID. (status code 200)
     *         or The request failed due to wrong data. Please check the provided parameters and try again. (status code 400)
     *         or The request failed because you are not authorized. (status code 401)
     *         or The request failed because the requested resource is forbidden. (status code 403)
     *         or The request failed because the server is in error. Please try again later. (status code 500)
     */
    @Operation(
        operationId = "usersUserIdGet",
        summary = "Get the user by user ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Found user by provided user ID.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request failed due to wrong data. Please check the provided parameters and try again.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request failed because you are not authorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The request failed because the requested resource is forbidden.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request failed because the server is in error. Please try again later.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> usersUserIdGet(
        @Parameter(name = "userId", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gender\" : \"gender\", \"groupIds\" : [ \"groupIds\", \"groupIds\" ], \"name\" : \"name\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId} : Update user by user ID.
     *
     * @param userId ID of the user (required)
     * @param modifyUser Request modifying user. (required)
     * @return Found user by provided user ID. (status code 200)
     *         or The request failed due to wrong data. Please check the provided parameters and try again. (status code 400)
     *         or The request failed because you are not authorized. (status code 401)
     *         or The request failed because the requested resource is forbidden. (status code 403)
     *         or The request failed because the server is in error. Please try again later. (status code 500)
     */
    @Operation(
        operationId = "usersUserIdPut",
        summary = "Update user by user ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Found user by provided user ID.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request failed due to wrong data. Please check the provided parameters and try again.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request failed because you are not authorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The request failed because the requested resource is forbidden.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request failed because the server is in error. Please try again later.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> usersUserIdPut(
        @Parameter(name = "userId", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "ModifyUser", description = "Request modifying user.", required = true) @Valid @RequestBody ModifyUser modifyUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gender\" : \"gender\", \"groupIds\" : [ \"groupIds\", \"groupIds\" ], \"name\" : \"name\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timeStamp\" : \"timeStamp\", \"reason\" : \"reason\", \"httpStatus\" : \"httpStatus\", \"message\" : \"message\", \"httpStatusCode\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
